<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bricks.Core</name>
    </assembly>
    <members>
        <member name="T:Bricks.Core.Conversion.ConversionException">
            <summary>
            Ошибка преобразования.
            </summary>
        </member>
        <member name="T:Bricks.Core.Conversion.Implementation.Converter">
            <summary>
            Реализация по умолчанию <see cref="T:Bricks.Core.Conversion.IConverter"/>.
            </summary>
        </member>
        <member name="T:Bricks.Core.Conversion.IConverter">
            <summary>
            Содержит методы приведения типов.
            </summary>
        </member>
        <member name="M:Bricks.Core.Conversion.IConverter.TryConvert``1(System.Object,``0@)">
            <summary>
            Пытается привести объект <paramref name="source" /> к типу <typeparamref name="TDestination" />.
            </summary>
            <typeparam name="TDestination">Целевой тип.</typeparam>
            <param name="source">Исходный объект.</param>
            <param name="destination">Объект целевого типа или значение по умолчанию, если не удалось сконвертировать.</param>
            <returns>Признак успешной конвертации.</returns>
        </member>
        <member name="M:Bricks.Core.Conversion.IConverter.Convert``1(System.Object)">
            <summary>
            Приводит объект <paramref name="source"/> к типу <typeparamref name="TDestination"/>.
            </summary>
            <typeparam name="TDestination">Целевой тип.</typeparam>
            <param name="source">Исходный объект.</param>
            <returns>Объект целевого типа.</returns>
            <exception cref="T:Bricks.Core.Conversion.ConversionException">В случае если не выполнить конвертацию.</exception>
        </member>
        <member name="M:Bricks.Core.Conversion.IConverter.Register``2">
            <summary>
            Регистрирует конвертер типа <typeparamref name="TConverter" /> для приведения к типу
            <typeparamref name="TDestination" />.
            </summary>
            <typeparam name="TDestination">Целевой тип.</typeparam>
            <typeparam name="TConverter">Тип конвертера.</typeparam>
        </member>
        <member name="M:Bricks.Core.Conversion.IConverter.Register``1(Bricks.Core.Conversion.IConverter{``0})">
            <summary>
            Регистриует конвертер <paramref name="converter" /> для приведения к типу <typeparamref name="TDestination" />.
            </summary>
            <typeparam name="TDestination">Целевой тип.</typeparam>
            <param name="converter">Конвертер.</param>
        </member>
        <member name="M:Bricks.Core.Conversion.Implementation.Converter.TryConvert``1(System.Object,``0@)">
            <summary>
            Пытается привести объект <paramref name="source" /> к типу <typeparamref name="TDestination" />.
            </summary>
            <typeparam name="TDestination">Целевой тип.</typeparam>
            <param name="source">Исходный объект.</param>
            <param name="destination">Объект целевого типа или значение по умолчанию, если не удалось сконвертировать.</param>
            <returns>Признак успешной конвертации.</returns>
        </member>
        <member name="M:Bricks.Core.Conversion.Implementation.Converter.Convert``1(System.Object)">
            <summary>
            Приводит объект <paramref name="source"/> к типу <typeparamref name="TDestination"/>.
            </summary>
            <typeparam name="TDestination">Целевой тип.</typeparam>
            <param name="source">Исходный объект.</param>
            <returns>Объект целевого типа.</returns>
            <exception cref="T:Bricks.Core.Conversion.ConversionException">В случае если не выполнить конвертацию.</exception>
        </member>
        <member name="M:Bricks.Core.Conversion.Implementation.Converter.Register``2">
            <summary>
            Регистрирует конвертер типа <typeparamref name="TConverter" /> для приведения к типу
            <typeparamref name="TDestination" />.
            </summary>
            <typeparam name="TDestination">Целевой тип.</typeparam>
            <typeparam name="TConverter">Тип конвертера.</typeparam>
        </member>
        <member name="M:Bricks.Core.Conversion.Implementation.Converter.Register``1(Bricks.Core.Conversion.IConverter{``0})">
            <summary>
            Регистриует конвертер <paramref name="converter" /> для приведения к типу <typeparamref name="TDestination" />.
            </summary>
            <typeparam name="TDestination">Целевой тип.</typeparam>
            <param name="converter">Конвертер.</param>
        </member>
        <member name="T:Bricks.Core.Conversion.IConverter`1">
            <summary>
            Конфертер объектов к типу <typeparamref name="TDestination" />.
            </summary>
            <typeparam name="TDestination">Целевой тип.</typeparam>
        </member>
        <member name="M:Bricks.Core.Conversion.IConverter`1.TryConvert(System.Object,`0@)">
            <summary>
            Пытается привести объект <paramref name="source" /> к типу <typeparamref name="TDestination" />.
            </summary>
            <param name="source">Исходный объект.</param>
            <param name="destination">Объект целевого типа или значение по умолчанию, если не удалось сконвертировать.</param>
            <returns>Признак успешной конвертации.</returns>
        </member>
        <member name="T:Bricks.Core.Conversion.IConvertible`1">
            <summary>
            Интерфейс типа, который можно сконвертировать в тип <typeparamref name="TTarget" />.
            </summary>
            <typeparam name="TTarget">Целевой тип.</typeparam>
        </member>
        <member name="M:Bricks.Core.Conversion.IConvertible`1.Convert">
            <summary>
            Возвращает экземпляр типа <typeparamref name="TTarget" />, построенный на основе данного.
            </summary>
            <returns>Экземпляр типа <typeparamref name="TTarget" />.</returns>
        </member>
        <member name="T:Bricks.Core.Configuration.Implementation.ConfigurationElementCollectionAdapter`2">
            <summary>
            Адаптер <see cref="T:System.Configuration.ConfigurationElementCollection"/> для <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>.
            </summary>
            <typeparam name="T">Тип элементов в коллекции.</typeparam>
            <typeparam name="TKey">Тип ключа элементов в коллекции.</typeparam>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.ConfigurationElementCollectionAdapter`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.ConfigurationElementCollectionAdapter`2.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.ConfigurationElementCollectionAdapter`2.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified
            <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for. </param>
        </member>
        <member name="T:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl">
            <summary>
            Реализация по умолчанию <see cref="T:Bricks.Core.Configuration.IConfigurationManager"/>, использующая <see cref="T:System.Configuration.ConfigurationManager"/>.
            </summary>
        </member>
        <member name="T:Bricks.Core.Configuration.IConfigurationManager">
            <summary>
            Интерфейс менеджера конфигурации.
            </summary>
        </member>
        <member name="M:Bricks.Core.Configuration.IConfigurationManager.GetSettings``1(System.String)">
            <summary>
            Возвращает настройки типа <typeparamref name="TSettings"/> по ключу <see cref="!:key"/>.
            </summary>
            <typeparam name="TSettings">Тип настроек.</typeparam>
            <param name="key">Ключ настроек.</param>
            <returns>Настройки типа <typeparamref name="TSettings"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Configuration.IConfigurationManager.AddSettings``1(``0,System.String)">
            <summary>
            Добавляет настройки типа <typeparamref name="TSettings"/> с необязательным ключом <see cref="!:key"/>.
            </summary>
            <typeparam name="TSettings">Тип настроек.</typeparam>
            <param name="settings">Объект настроек.</param>
            <param name="key">Ключ настроек.</param>
        </member>
        <member name="P:Bricks.Core.Configuration.IConfigurationManager.AppSettings">
            <summary>
            Настройки приложения.
            </summary>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.GetSettings``1(System.String)">
            <summary>
            Возвращает настройки типа <typeparamref name="TSettings"/> по ключу <see cref="!:key"/>.
            </summary>
            <typeparam name="TSettings">Тип настроек.</typeparam>
            <param name="key">Ключ настроек.</param>
            <returns>Настройки типа <typeparamref name="TSettings"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.AddSettings``1(``0,System.String)">
            <summary>
            Добавляет настройки типа <typeparamref name="TSettings"/> с необязательным ключом <see cref="!:key"/>.
            </summary>
            <typeparam name="TSettings">Тип настроек.</typeparam>
            <param name="settings">Объект настроек.</param>
            <param name="key">Ключ настроек.</param>
        </member>
        <member name="P:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.AppSettings">
            <summary>
            Настройки приложения.
            </summary>
        </member>
        <member name="T:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.NameValueCollectionAdapter">
            <summary>
            Адаптер <see cref="T:System.Collections.Specialized.NameValueCollection"/> для <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.NameValueCollectionAdapter.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.NameValueCollectionAdapter.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.NameValueCollectionAdapter.ContainsKey(System.String)">
            <summary>
            Determines whether the read-only dictionary contains an element that has the specified key.
            </summary>
            <returns>
            true if the read-only dictionary contains an element that has the specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.NameValueCollectionAdapter.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <returns>
            true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface
            contains an element that has the specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed
            uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="P:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.NameValueCollectionAdapter.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
            <returns>
            The number of elements in the collection.
            </returns>
        </member>
        <member name="P:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.NameValueCollectionAdapter.Item(System.String)">
            <summary>
            Gets the element that has the specified key in the read-only dictionary.
            </summary>
            <returns>
            The element that has the specified key in the read-only dictionary.
            </returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and
            <paramref name="key" /> is not found.
            </exception>
        </member>
        <member name="P:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.NameValueCollectionAdapter.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the read-only dictionary.
            </summary>
            <returns>
            An enumerable collection that contains the keys in the read-only dictionary.
            </returns>
        </member>
        <member name="P:Bricks.Core.Configuration.Implementation.ConfigurationManagerImpl.NameValueCollectionAdapter.Values">
            <summary>
            Gets an enumerable collection that contains the values in the read-only dictionary.
            </summary>
            <returns>
            An enumerable collection that contains the values in the read-only dictionary.
            </returns>
        </member>
        <member name="T:Bricks.Core.Configuration.IKeyConfigurationElement`1">
            <summary>
            Элемент конфигурации, у которого есть ключ.
            </summary>
            <typeparam name="TKey">Тип ключа.</typeparam>
        </member>
        <member name="P:Bricks.Core.Configuration.IKeyConfigurationElement`1.Key">
            <summary>
            Ключ элемента.
            </summary>
        </member>
        <member name="T:Bricks.Core.Configuration.Implementation.KeyValueConfigurationCollectionAdapter`1">
            <summary>
            Адаптер <see cref="T:System.Configuration.KeyValueConfigurationCollection"/> для <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <typeparam name="TValue">Тип значения словаря.</typeparam>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.KeyValueConfigurationCollectionAdapter`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.KeyValueConfigurationCollectionAdapter`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.KeyValueConfigurationCollectionAdapter`1.ContainsKey(System.String)">
            <summary>
            Determines whether the read-only dictionary contains an element that has the specified key.
            </summary>
            <returns>
            true if the read-only dictionary contains an element that has the specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Bricks.Core.Configuration.Implementation.KeyValueConfigurationCollectionAdapter`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <returns>
            true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface
            contains an element that has the specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed
            uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="P:Bricks.Core.Configuration.Implementation.KeyValueConfigurationCollectionAdapter`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
            <returns>
            The number of elements in the collection.
            </returns>
        </member>
        <member name="P:Bricks.Core.Configuration.Implementation.KeyValueConfigurationCollectionAdapter`1.Item(System.String)">
            <summary>
            Gets the element that has the specified key in the read-only dictionary.
            </summary>
            <returns>
            The element that has the specified key in the read-only dictionary.
            </returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and
            <paramref name="key" /> is not found.
            </exception>
        </member>
        <member name="P:Bricks.Core.Configuration.Implementation.KeyValueConfigurationCollectionAdapter`1.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the read-only dictionary.
            </summary>
            <returns>
            An enumerable collection that contains the keys in the read-only dictionary.
            </returns>
        </member>
        <member name="P:Bricks.Core.Configuration.Implementation.KeyValueConfigurationCollectionAdapter`1.Values">
            <summary>
            Gets an enumerable collection that contains the values in the read-only dictionary.
            </summary>
            <returns>
            An enumerable collection that contains the values in the read-only dictionary.
            </returns>
        </member>
        <member name="T:Bricks.Core.Conversion.Implementation.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bricks.Core.Conversion.Implementation.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bricks.Core.Conversion.Implementation.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bricks.Core.Conversion.Implementation.Resources.Converter_Convert_UnableToConvert">
            <summary>
              Looks up a localized string similar to Не удалось привести объект к указанному типу..
            </summary>
        </member>
        <member name="T:Bricks.Core.Disposing.Implementation.ActionDisposable">
            <summary>
            The implementation of the <see cref="T:System.IDisposable"/> that excutes delegate when releasing resources.
            </summary>
        </member>
        <member name="T:Bricks.Core.Disposing.Implementation.DisposableBase">
            <summary>
            The base class for the <see cref="T:System.IDisposable"/> implementation.
            </summary>
        </member>
        <member name="M:Bricks.Core.Disposing.Implementation.DisposableBase.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Bricks.Core.Disposing.Implementation.DisposableBase.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            <c>true</c> if method is called from <see cref="M:Bricks.Core.Disposing.Implementation.DisposableBase.Dispose(System.Boolean)"/>; <c>false</c> if method is called by finalizer.
            </param>
        </member>
        <member name="P:Bricks.Core.Disposing.Implementation.DisposableBase.IsDisposed">
            <summary>
            <c>true</c> if resources have been already released.
            </summary>
        </member>
        <member name="M:Bricks.Core.Disposing.Implementation.ActionDisposable.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            <c>true</c> if method is called from <see cref="M:Bricks.Core.Disposing.Implementation.ActionDisposable.Dispose(System.Boolean)"/>; <c>false</c> if method is called by finalizer.
            </param>
        </member>
        <member name="T:Bricks.Core.Disposing.Implementation.DisposableHelper">
            <summary>
            The default implementation of <see cref="T:Bricks.Core.Disposing.IDisposableHelper"/>.
            </summary>
        </member>
        <member name="T:Bricks.Core.Disposing.IDisposableHelper">
            <summary>
            Contains methods for the <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Bricks.Core.Disposing.IDisposableHelper.Action(System.Action)">
            <summary>
            Creates an <see cref="T:System.IDisposable"/> object that executes action <paramref name="dispose"/> when releasing resources.
            </summary>
            <param name="dispose">An <see cref="M:Bricks.Core.Disposing.IDisposableHelper.Action(System.Action)"/> that will be executed when releasing resources.</param>
            <returns>
            An <see cref="T:System.IDisposable"/> object that executes action <paramref name="dispose"/> when releasing resources.
            </returns>
        </member>
        <member name="M:Bricks.Core.Disposing.Implementation.DisposableHelper.Action(System.Action)">
            <summary>
            Creates an <see cref="T:System.IDisposable"/> object that executes action <paramref name="dispose"/> when releasing resources.
            </summary>
            <param name="dispose">An <see cref="M:Bricks.Core.Disposing.Implementation.DisposableHelper.Action(System.Action)"/> that will be executed when releasing resources.</param>
            <returns>
            An <see cref="T:System.IDisposable"/> object that executes action <paramref name="dispose"/> when releasing resources.
            </returns>
        </member>
        <member name="T:Bricks.Core.Extensions.TimeSpanExtensions">
            <summary>
            Расширения для <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:Bricks.Core.Extensions.TimeSpanExtensions.RoundToSeconds(System.TimeSpan)">
            <summary>
            Округляет до целых секунд.
            </summary>
            <param name="timeSpan">Период времени.</param>
            <returns>Общее количество секунд.</returns>
        </member>
        <member name="M:Bricks.Core.Extensions.TimeSpanExtensions.RoundToMinutes(System.TimeSpan)">
            <summary>
            Округляет до целых минут.
            </summary>
            <param name="timeSpan">Период времени.</param>
            <returns>Общее количество минут.</returns>
        </member>
        <member name="T:Bricks.Core.IoC.ServiceLocatorExtensions">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.
            </summary>
        </member>
        <member name="M:Bricks.Core.IoC.ServiceLocatorExtensions.BuildUp``1(Microsoft.Practices.ServiceLocation.IServiceLocator,``0,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Performs injection on object <paramref name="existing" />.
            </summary>
            <typeparam name="T">Type of object to perform injection on.</typeparam>
            <param name="serviceLocator">The service locator.</param>
            <param name="existing">Instance to build up.</param>
            <param name="resolverOverrides">Any overrides for the Buildup.</param>
            <returns>
            The resulting object. By default, this will be <paramref name="existing" />, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <typeparamref name="T" />).
            </returns>
        </member>
        <member name="T:Bricks.Core.IoC.SimpleUnityServiceLocator">
            <summary>
            The implementation of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that uses <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>
            and doesn't implement the  <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Bricks.Core.IoC.SimpleUnityServiceLocator.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:Bricks.Core.IoC.SimpleUnityServiceLocator.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="T:Bricks.Core.Modularity.IApplication">
            <summary>
            Represents a modular application.
            </summary>
        </member>
        <member name="M:Bricks.Core.Modularity.IApplication.Initialize(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes the application.
            </summary>
            <param name="args">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> that contains initialization arguments.</param>
        </member>
        <member name="T:Bricks.Core.Modularity.IModularitySettings">
            <summary>
            Настройки модульности приложения.
            </summary>
        </member>
        <member name="P:Bricks.Core.Modularity.IModularitySettings.Modules">
            <summary>
            Коллекция модулей приложения.
            </summary>
        </member>
        <member name="T:Bricks.Core.Modularity.IModule">
            <summary>
            Represents a module of an application.
            </summary>
        </member>
        <member name="M:Bricks.Core.Modularity.IModule.Initialize(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes the module.
            </summary>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> that is used to store application dependencies.</param>
            <param name="args">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> that contains initialization arguments.</param>
        </member>
        <member name="T:Bricks.Core.Modularity.IModuleSettings">
            <summary>
            Настройки модуля приложения.
            </summary>
        </member>
        <member name="P:Bricks.Core.Modularity.IModuleSettings.Name">
            <summary>
            Имя модуля.
            </summary>
        </member>
        <member name="P:Bricks.Core.Modularity.IModuleSettings.Type">
            <summary>
            Тип модуля.
            </summary>
        </member>
        <member name="P:Bricks.Core.Modularity.IModuleSettings.Order">
            <summary>
            Порядок инициализации.
            </summary>
        </member>
        <member name="T:Bricks.Core.Modularity.Implementation.ApplicationBase">
            <summary>
            Базовый класс приложения.
            </summary>
        </member>
        <member name="F:Bricks.Core.Modularity.Implementation.ApplicationBase.MODULARITY_SETTINGS_KEY">
            <summary>
            Ключ настроек модулей.
            </summary>
        </member>
        <member name="M:Bricks.Core.Modularity.Implementation.ApplicationBase.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            <c>true</c> if method is called from <see cref="M:Bricks.Core.Disposing.Implementation.DisposableBase.Dispose(System.Boolean)"/>; <c>false</c> if method is called by
            finalizer.
            </param>
        </member>
        <member name="M:Bricks.Core.Modularity.Implementation.ApplicationBase.Initialize(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes the application.
            </summary>
            <param name="args">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> that contains initialization arguments.</param>
        </member>
        <member name="T:Bricks.Core.Modularity.Implementation.ModularityConfigurationSection">
            <summary>
            Секция настроек модульности приложения.
            </summary>
        </member>
        <member name="P:Bricks.Core.Modularity.Implementation.ModularityConfigurationSection.Bricks#Core#Modularity#IModularitySettings#Modules">
            <summary>
            Коллекция модулей приложения.
            </summary>
        </member>
        <member name="T:Bricks.Core.Modularity.Implementation.ModuleBase">
            <summary>
            Базовый класс модуля.
            </summary>
        </member>
        <member name="M:Bricks.Core.Modularity.Implementation.ModuleBase.Initialize(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes the module.
            </summary>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> that is used to store application dependencies.</param>
            <param name="args">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> that contains initialization arguments.</param>
        </member>
        <member name="T:Bricks.Core.Modularity.Implementation.ModuleConfigurationElement">
            <summary>
            Настройки модуля приложения.
            </summary>
        </member>
        <member name="P:Bricks.Core.Modularity.Implementation.ModuleConfigurationElement.Type">
            <summary>
            Полное имя типа модуля.
            </summary>
        </member>
        <member name="P:Bricks.Core.Modularity.Implementation.ModuleConfigurationElement.Name">
            <summary>
            Название модуля.
            </summary>
        </member>
        <member name="P:Bricks.Core.Modularity.Implementation.ModuleConfigurationElement.Bricks#Core#Modularity#IModuleSettings#Type">
            <summary>
            Тип модуля.
            </summary>
        </member>
        <member name="P:Bricks.Core.Modularity.Implementation.ModuleConfigurationElement.Order">
            <summary>
            Порядок инициализации.
            </summary>
        </member>
        <member name="P:Bricks.Core.Modularity.Implementation.ModuleConfigurationElement.Key">
            <summary>
            Ключ элемента.
            </summary>
        </member>
        <member name="T:Bricks.Core.Modularity.Implementation.ModuleConfigurationElementCollection">
            <summary>
            Коллекция настроек модулей.
            </summary>
        </member>
        <member name="T:Bricks.Core.Reflection.ReflectionHelper">
            <summary>
            Помощник работы с рефлексией.
            </summary>
        </member>
        <member name="M:Bricks.Core.Reflection.ReflectionHelper.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Получает название члена класса на основе выражения <paramref name="expression" />.
            </summary>
            <typeparam name="T">Тип возвращаемого значения.</typeparam>
            <param name="expression">Выражение, являющееся обращением к члену класса.</param>
            <returns>Название члена классса.</returns>
        </member>
        <member name="M:Bricks.Core.Reflection.ReflectionHelper.GetVariableName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Получает название переменной из выражения <paramref name="expression" />.
            </summary>
            <typeparam name="T">Тип возвращаемого значения.</typeparam>
            <param name="expression">Выражение, являющееся обращением к переменной.</param>
            <returns>Название переменной.</returns>
        </member>
        <member name="T:Bricks.Core.Resources.Implementation.ResourceManagerImpl">
            <summary>
            Реализация по умолчанию <see cref="T:Bricks.Core.Resources.IResourceManager"/>.
            </summary>
        </member>
        <member name="T:Bricks.Core.Resources.IResourceManager">
            <summary>
            Представляет менеджера ресурсов.
            </summary>
        </member>
        <member name="M:Bricks.Core.Resources.IResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Получает локализованную строку, соответствующую культуре <paramref name="culture" />,
            по имени <paramref name="name" />.
            </summary>
            <param name="name">Имя строки в ресурсе.</param>
            <param name="culture">Культура.</param>
            <returns>Локализованная строка.</returns>
        </member>
        <member name="M:Bricks.Core.Resources.Implementation.ResourceManagerImpl.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Получает локализованную строку, соответствующую культуре <paramref name="culture" />,
            по имени <paramref name="name" />.
            </summary>
            <param name="name">Имя строки в ресурсе.</param>
            <param name="culture">Культура.</param>
            <returns>Локализованная строка.</returns>
        </member>
        <member name="T:Bricks.Core.Resources.Implementation.ResourceProvider">
            <summary>
            Реализация по умолчанию <see cref="T:Bricks.Core.Resources.IResourceProvider"/>.
            </summary>
        </member>
        <member name="T:Bricks.Core.Resources.IResourceProvider">
            <summary>
            Поставщик ресурсов.
            </summary>
        </member>
        <member name="M:Bricks.Core.Resources.IResourceProvider.GetResourceManager(System.Type)">
            <summary>
            Получает менеджера ресурсов по типу сгенерированного класса ресурсов.
            </summary>
            <param name="resourceType">Тип сгенерированного класса ресурсов.</param>
            <returns>Менеджер ресурсов.</returns>
        </member>
        <member name="M:Bricks.Core.Resources.IResourceProvider.GetResourceManager(System.String,System.Reflection.Assembly)">
            <summary>
            Получает менеджера ресурсов по названию <paramref name="baseName" />
            встроенного в сборку <paramref name="assembly" /> ресурса.
            </summary>
            <param name="baseName">Название ресурса.</param>
            <param name="assembly">Сборка.</param>
            <returns>Менеджер ресурсов.</returns>
        </member>
        <member name="M:Bricks.Core.Resources.Implementation.ResourceProvider.GetResourceManager(System.Type)">
            <summary>
            Получает менеджера ресурсов по типу сгенерированного класса ресурсов.
            </summary>
            <param name="resourceType">Тип сгенерированного класса ресурсов.</param>
            <returns>Менеджер ресурсов.</returns>
        </member>
        <member name="M:Bricks.Core.Resources.Implementation.ResourceProvider.GetResourceManager(System.String,System.Reflection.Assembly)">
            <summary>
            Получает менеджера ресурсов по названию <paramref name="baseName" />
            встроенного в сборку <paramref name="assembly" /> ресурса.
            </summary>
            <param name="baseName">Название ресурса.</param>
            <param name="assembly">Сборка.</param>
            <returns>Менеджер ресурсов.</returns>
        </member>
        <member name="T:Bricks.Core.Resources.ResourceProviderExtensions">
            <summary>
            Содрежит методы расширения для <see cref="T:Bricks.Core.Resources.IResourceProvider"/>.
            </summary>
        </member>
        <member name="M:Bricks.Core.Resources.ResourceProviderExtensions.GetResourceManager(Bricks.Core.Resources.IResourceProvider,System.String)">
            <summary>
            Получает менеджера ресурсов по имени типа сгенерированного класса ресурсов.
            </summary>
            <param name="resourceProvider">Поставщик ресурсов.</param>
            <param name="resourceTypeName">Полное имя типа сгенерированного класса ресурсов.</param>
            <returns>Менеджер ресурсов.</returns>
        </member>
        <member name="T:Bricks.Core.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bricks.Core.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bricks.Core.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bricks.Core.Resources.Resources.ResourceProviderExtensions_GetResourceManager_TypeNameIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to Необходимо указать полное имя типа менеджера ресурсов..
            </summary>
        </member>
        <member name="T:Bricks.Core.Results.IResult">
            <summary>
            Описывает результат выполнения функции.
            </summary>
        </member>
        <member name="P:Bricks.Core.Results.IResult.Success">
            <summary>
            Признак успешного завершения.
            </summary>
        </member>
        <member name="P:Bricks.Core.Results.IResult.Message">
            <summary>
            Сообщение, описывающее результат.
            </summary>
        </member>
        <member name="P:Bricks.Core.Results.IResult.Exception">
            <summary>
            Исключение.
            </summary>
        </member>
        <member name="P:Bricks.Core.Results.IResult.InnerResult">
            <summary>
            Внутренний результат.
            </summary>
        </member>
        <member name="T:Bricks.Core.Results.IResult`1">
            <summary>
            Описывает результат выполнения функции с данными.
            </summary>
            <typeparam name="TData">Тип данных.</typeparam>
        </member>
        <member name="P:Bricks.Core.Results.IResult`1.Data">
            <summary>
            Данные.
            </summary>
        </member>
        <member name="T:Bricks.Core.Results.IResultFactory">
            <summary>
            Фабрика создания результатов функций.
            </summary>
        </member>
        <member name="M:Bricks.Core.Results.IResultFactory.Create(System.Boolean,System.String,System.Exception,Bricks.Core.Results.IResult)">
            <summary>
            Создаёт результат выполнения функции.
            </summary>
            <param name="success">Признак успешного завершения.</param>
            <param name="message">Сообщение, описывающее результат.</param>
            <param name="exception">Исключение.</param>
            <param name="inneResult">Внутренний результат.</param>
            <returns>Результат выполнения функции.</returns>
        </member>
        <member name="M:Bricks.Core.Results.IResultFactory.Create``1(``0,System.Boolean,System.String,System.Exception,Bricks.Core.Results.IResult)">
            <summary>
            Создаёт результат выполнения функции с данными.
            </summary>
            <typeparam name="TData">Тип данных.</typeparam>
            <param name="data">Данные.</param>
            <param name="success">Признак успешного завершения.</param>
            <param name="message">Сообщение, описывающее результат.</param>
            <param name="exception">Исключение.</param>
            <param name="inneResult">Внутренний результат.</param>
            <returns>Результат выполнения функции с данными.</returns>
        </member>
        <member name="T:Bricks.Core.Results.Implementation.ResultFactory">
            <summary>
            Реализация по умолчанию <see cref="T:Bricks.Core.Results.Implementation.ResultFactory"/>.
            </summary>
        </member>
        <member name="M:Bricks.Core.Results.Implementation.ResultFactory.Create(System.Boolean,System.String,System.Exception,Bricks.Core.Results.IResult)">
            <summary>
            Создаёт результат выполнения функции.
            </summary>
            <param name="success">Признак успешного завершения.</param>
            <param name="message">Сообщение, описывающее результат.</param>
            <param name="exception">Исключение.</param>
            <param name="inneResult">Внутренний результат.</param>
            <returns>Результат выполнения функции.</returns>
        </member>
        <member name="M:Bricks.Core.Results.Implementation.ResultFactory.Create``1(``0,System.Boolean,System.String,System.Exception,Bricks.Core.Results.IResult)">
            <summary>
            Создаёт результат выполнения функции с данными.
            </summary>
            <typeparam name="TData">Тип данных.</typeparam>
            <param name="data">Данные.</param>
            <param name="success">Признак успешного завершения.</param>
            <param name="message">Сообщение, описывающее результат.</param>
            <param name="exception">Исключение.</param>
            <param name="inneResult">Внутренний результат.</param>
            <returns>Результат выполнения функции с данными.</returns>
        </member>
        <member name="P:Bricks.Core.Results.Implementation.ResultFactory.Result.Success">
            <summary>
            Признак успешного завершения.
            </summary>
        </member>
        <member name="P:Bricks.Core.Results.Implementation.ResultFactory.Result.Message">
            <summary>
            Сообщение, описывающее результат.
            </summary>
        </member>
        <member name="P:Bricks.Core.Results.Implementation.ResultFactory.Result.Exception">
            <summary>
            Исключение.
            </summary>
        </member>
        <member name="P:Bricks.Core.Results.Implementation.ResultFactory.Result.InnerResult">
            <summary>
            Внутренний результат.
            </summary>
        </member>
        <member name="P:Bricks.Core.Results.Implementation.ResultFactory.Result`1.Data">
            <summary>
            Данные.
            </summary>
        </member>
        <member name="T:Bricks.Core.Seams.IRandomProvider">
            <summary>
            Represents a provider for <see cref="T:System.Random"/> objects.
            </summary>
        </member>
        <member name="M:Bricks.Core.Seams.IRandomProvider.Get">
            <summary>
            Gets a <see cref="T:System.Random"/> object.
            </summary>
            <returns>A <see cref="T:System.Random"/> object.</returns>
        </member>
        <member name="T:Bricks.Core.Seams.Implementation.RandomProvider">
            <summary>
            The default implementation of <see cref="T:Bricks.Core.Seams.IRandomProvider"/>.
            </summary>
        </member>
        <member name="M:Bricks.Core.Seams.Implementation.RandomProvider.Get">
            <summary>
            Gets a <see cref="T:System.Random"/> object.
            </summary>
            <returns>A <see cref="T:System.Random"/> object.</returns>
        </member>
        <member name="T:Bricks.Core.Serialization.ISerializationHelper">
            <summary>
            Помощник сериализации.
            </summary>
        </member>
        <member name="M:Bricks.Core.Serialization.ISerializationHelper.CreateJObject``1(``0)">
            <summary>
            Создаёт объект <see cref="T:Newtonsoft.Json.Linq.JObject"/> на основе объекта <paramref name="source"/>.
            </summary>
            <typeparam name="T">Тип исходного объекта.</typeparam>
            <param name="source">Исходный объект.</param>
            <returns>Новый объект <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Serialization.ISerializationHelper.CreateJToken``1(``0)">
            <summary>
            Создаёт объект <see cref="T:Newtonsoft.Json.Linq.JToken"/> на основе объекта <paramref name="source"/>.
            </summary>
            <typeparam name="T">Тип исходного объекта.</typeparam>
            <param name="source">Исходный объект.</param>
            <returns>Новый объект <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Serialization.ISerializationHelper.DeserializeJson``1(System.IO.Stream)">
            <summary>
            Выполняет десериализацию объекта из потока с данными в формате JSON.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="stream">Поток с данными в формате JSON.</param>
            <returns>Новый объект <see cref="!:T"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Serialization.ISerializationHelper.DeserializeJson``1(System.String)">
            <summary>
            Выполняет десериализацию объекта из текста в формате JSON.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="json">Текст с данными в формате JSON.</param>
            <returns>Новый объект <see cref="!:T"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Serialization.ISerializationHelper.DeserializeJson``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Выполняет десериализацию объекта из JSON-объекта.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="jObject">JSON-объект.</param>
            <returns>Новый объект <see cref="!:T"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Serialization.ISerializationHelper.TryDeserializeJson``1(System.IO.Stream,``0@)">
            <summary>
            Пытается десериализовать объект из потока с данными в формате JSON.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="stream">Поток с данными в формате JSON.</param>
            <param name="value">Новый объект <see cref="!:T"/>.</param>
            <returns>Признак успешной десериализации.</returns>
        </member>
        <member name="T:Bricks.Core.Serialization.Implementation.SerializationHelper">
            <summary>
            Реализация по умолчанию <see cref="T:Bricks.Core.Serialization.ISerializationHelper"/>.
            </summary>
        </member>
        <member name="M:Bricks.Core.Serialization.Implementation.SerializationHelper.CreateJObject``1(``0)">
            <summary>
            Создаёт объект <see cref="T:Newtonsoft.Json.Linq.JObject"/> на основе объекта <paramref name="source"/>.
            </summary>
            <typeparam name="T">Тип исходного объекта.</typeparam>
            <param name="source">Исходный объект.</param>
            <returns>Новый объект <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Serialization.Implementation.SerializationHelper.CreateJToken``1(``0)">
            <summary>
            Создаёт объект <see cref="T:Newtonsoft.Json.Linq.JToken"/> на основе объекта <paramref name="source"/>.
            </summary>
            <typeparam name="T">Тип исходного объекта.</typeparam>
            <param name="source">Исходный объект.</param>
            <returns>Новый объект <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Serialization.Implementation.SerializationHelper.DeserializeJson``1(System.IO.Stream)">
            <summary>
            Выполняет десериализацию объекта из потока с данными в формате JSON.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="stream">Поток с данными в формате JSON.</param>
            <returns>Новый объект <see cref="!:T"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Serialization.Implementation.SerializationHelper.DeserializeJson``1(System.String)">
            <summary>
            Выполняет десериализацию объекта из текста в формате JSON.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="json">Текст с данными в формате JSON.</param>
            <returns>Новый объект <see cref="!:T"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Serialization.Implementation.SerializationHelper.DeserializeJson``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Выполняет десериализацию объекта из JSON-объекта.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="jObject">JSON-объект.</param>
            <returns>Новый объект <see cref="!:T"/>.</returns>
        </member>
        <member name="M:Bricks.Core.Serialization.Implementation.SerializationHelper.TryDeserializeJson``1(System.IO.Stream,``0@)">
            <summary>
            Пытается десериализовать объект из потока с данными в формате JSON.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="stream">Поток с данными в формате JSON.</param>
            <param name="value">Новый объект <see cref="!:T"/>.</param>
            <returns>Признак успешной десериализации.</returns>
        </member>
        <member name="T:Bricks.Core.Tasks.ICancellationTokenProvider">
            <summary>
            Поставщик токена отмена.
            </summary>
        </member>
        <member name="M:Bricks.Core.Tasks.ICancellationTokenProvider.GetCancellationToken">
            <summary>
            Получает токен отмены.
            </summary>
            <returns>Токен отмены.</returns>
        </member>
        <member name="T:Bricks.Core.Tasks.NoneCancellationTokenProvider">
            <summary>
            Провайдер пустого токена отмены.
            </summary>
        </member>
        <member name="M:Bricks.Core.Tasks.NoneCancellationTokenProvider.GetCancellationToken">
            <summary>
            Получает токен отмены.
            </summary>
            <returns>Токен отмены.</returns>
        </member>
    </members>
</doc>
